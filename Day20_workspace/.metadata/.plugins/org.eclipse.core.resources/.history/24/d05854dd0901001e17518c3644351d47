package program;

import java.util.Comparator;
import java.util.LinkedList;

import data.Variables;

public class Management {
	// java의 collection : 자료구조
	// -> java.util패키지에 존재함
	// -> 세부 정보가 필요할 경우 기술문서(레퍼런스)를 참고해야 함
	// - 대량의 클래스 및 인터페이스가 상속된 제네릭클래스
	// - 1) 객체 관리를 더 효율적으로 하기 위한 껍데기
	// - 2) 그런 객체의 사용방식을 통제하기 위한 방법
	// Linked List : 연결리스트 - 배열을 대체함
	// - 크기가 줄거나 늘어날 수 있는 배열
	public static void EX1() {
		LinkedList<Integer> list1 = new LinkedList<Integer>();
		list1.add(30);
		list1.add(10);
		list1.add(20);
		System.out.println(list1.size()); // 크기 확인
		System.out.println(list1.get(0)); // 지정 인덱스값 가져오기
		System.out.println(list1);	// 확인을 위한 출력
		list1.remove(1); // 인덱스를 지정해서 제거할 수 있음
		System.out.println(list1);
		list1.sort(null); // 자료구조는 정렬을 위해서 주로 사용됨
		System.out.println(list1);
	}
	public static void EX2() {
		LinkedList<Variables> list2 = new LinkedList<Variables>();
		list2.add(new Variables( 1, 2)); // 객체로 준비할 경우
		list2.add(new Variables( 9, 8)); // 생성된 객체를 보관시켜야 함
		list2.add(new Variables( 3, 1));
		list2.add(new Variables(11, 0));
		System.out.println(list2.get(0).get1()); // 가져온 것의 필드 또는 메서드를 
		System.out.println(list2.get(0).get2()); // 다시 지정하여 호출해야 함
		System.out.println(list2);
		// 객체를 다룰 때 정렬이 필요할 경우 인터페이스를 붙여서
		// 구현시켜 놓으면 정렬이 됨
		list2.sort(null);
		System.out.println(list2);
	}
	public static void EX3() {
		LinkedList<Variables> list2 = new LinkedList<Variables>();
		list2.add(new Variables( 1, 2));
		list2.add(new Variables( 9, 8));
		list2.add(new Variables( 3, 1));
		list2.add(new Variables(11, 0));

		// 익명객체 : 상속받은 클래스를 정의하지 않고, 실시간으로 생성하는 객체
		// - 예측이 안되서 미리 준비가 안되어 있을 때, 이를 땜빵하기 위한 객체
		// - 실제로는, 사용빈도가 너무 적어서(1회) 필요할 때만 만들어 쓰는 것
		// - 추상클래스/인터페이스만 가능하고, 정의가 안되어 있는 것은 정의해줘야 생성됨
		
		// Comparator : java.util 패키지에 존재하는 인터페이스
		// - compare 메서드 : compareTo와 동일한 동작을 수행함
		// - 메서드가 하나뿐인 인터페이스를 함수형 인터페이스
		Comparator<Variables> comp = new Comparator<Variables>() {
			public int compare(Variables that1, Variables that2) {
				if (that1.get2() < that2.get2()) return -1;
				else if (that1.get2() == that2.get2()) return 0;
				else return 1;
			}
		};
		// Comparable의 compareTo : 기본적인 정렬기준
		// Comparator의 compare : 필요할 때 바꿀 수 있는 정렬기준
		list2.sort(comp);
		System.out.println(list2);
	}
	public static void main(String[] args) {
		LinkedList<Variables> list2 = new LinkedList<Variables>();
		list2.add(new Variables( 1, 2));
		list2.add(new Variables( 9, 8));
		list2.add(new Variables( 3, 1));
		list2.add(new Variables(11, 0));

		Comparator<Variables> comp = new Comparator<Variables>() {
			public int compare(Variables that1, Variables that2) {
				if (that1.get2() < that2.get2()) return -1;
				else if (that1.get2() == that2.get2()) return 0;
				else return 1;
			}
		};

		list2.sort(comp);
		System.out.println(list2);
	}
}








