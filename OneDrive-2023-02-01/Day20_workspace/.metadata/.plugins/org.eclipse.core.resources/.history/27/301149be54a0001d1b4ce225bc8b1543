package oop6;

class Material {
	protected String name;
	public Material(String name) {
		this.name = name;
	}
	public String toString() {
		return name;
	}
}
class Rock extends Material {
	public Rock() {
		super("규소");
	}
}
class Plastic extends Material {
	public Plastic() {
		super("고분자물질");
	}
}
class Compressor {
	private int count;
	public Compressor() {
		count = 0;
	}
	public void compress(Material that) {
		count += 1;
		System.out.println(that + "을(/를) 압착하여 파괴합니다.");
	}
	public void compress(Rock that) {
		count += 1;
		System.out.println(that + "을(/를) 압착하여 파괴합니다.");
	}
	public void compress(Plastic that) {
		count += 1;
		System.out.println(that + "을(/를) 압착하여 파괴합니다.");
	}
}
class CompressorA {
	private int count;
	public CompressorA() {
		count = 0;
	}
	public void compress(Material that) {
		count += 1;
		System.out.println(that + "을(/를) 압착하여 파괴합니다.");
	}
}

public class OOP15 {
	public static void main(String[] args) {
		// 상속 : 한번 만들어진 클래스를 재활용하는 기술
		// -> 중복되는 내용이 있으니 중복을 새로 만들지 않고 이용한다.
		Material mat = new Material("물질");
		Rock rock = new Rock();
		Plastic pla = new Plastic();
		
		Compressor comp1 = new Compressor();
		// 대상을 다루는 객체는 대상을 올바르게 다루기 위한 방법이 필요하다
		// - 메서드가 준비된다.
		// 문제상황 : 메서드를 몇개나 준비해야 하는가? 다루는 객체의 수량만큼
		comp1.compress(mat);
		comp1.compress(rock);
		comp1.compress(pla);
		
		// 해결방안 : 상속의 특징을 이용하여 편하게 다루게 만든다.
		// +@ : 객체의 클래스를 상속관계에 한해서 바꿀 수 있다.
		// -> 자료형을 바꾸는 것(형변환) - Upcasting / Downcasting
		// 핵심포인트 : 부모는 자식이 될 수 없다. 자식은 부모가 될 수 있다.
		
		// 기본논리 : 설계도(클래스)를 재활용하고 있고, 참조(비원시)는 공유변수다...
		Material that1 = (Material)rock;		// 이미 생성된 객체의 업캐스팅
		Material that2 = (Material)new Rock();	// 생성하면서 업캐스팅
		CompressorA comp2 = new CompressorA();
		comp2.compress(mat);	// 자료형이 같으니 공유
		comp2.compress(rock);	// 자료형이 다르니 업캐스팅
		comp2.compress(pla);	// 업캐스팅
		comp2.compress(that1);	// 공유
		comp2.compress(that2);	// 공유
		
		// 다운캐스팅 - 올라간 상태인 객체를 다시 원상태로 복구시키는 것
		// - 업캐스팅시에는 대상 객체(참조변수)에 해당 객체에 대한 정보가 들어있음
		//   -> Rock 클래스는 Material을 상속받았다는 정보가 rock변수에 들어있다.
		// - 다운캐스팅시에는 대상 객체(참조변수)에 자식클래스에 대한 정보가 없음
		//   -> 형변환 연산자로 형변환을 반드시 진행해줘야 함
		Rock rock2 = (Rock)mat;
	}
}







