package tech1;

abstract class Phone {
	protected String model;
	public abstract void powerOn();
	public abstract void powerOff();
}
// interface 명칭 으로 시작함
interface HowTo {
	// 1. 생성자 준비 불가하니 주의
	// 2. 필드는 공용필드이고, public static이다.
	// 3. abstract를 안붙여도 추상메서드가 됨.
	int count = 0;
	public default void call() {
		
	}
	public void sms() {
		
	}
	public void ai();
}
class Galaxy extends Phone {
	public Galaxy(String name) {
		model = name;
	}
	public void powerOn() {
		System.out.println("갤럭시로고가 나타남~");
	}
	public void powerOff() {
		System.out.println("갤럭시로고가 사라짐~");
	}
}
class IPhone extends Phone {
	public IPhone(String name) {
		model = name;
	}
	public void powerOn() {
		System.out.println("애플로고를 띄우고만 있다가 켜짐~");
	}
	public void powerOff() {
		System.out.println("애플로고를 띄우고만 있다가 꺼짐~");
	}
}

public class Interface1 {
	public static void main(String[] args) {
		// 추상클래스 - 동일한 필드를 제공하는 것이 주 목적
		//         - 메서드는 필요 최소한의 동일한 동작만 제공
		Phone p1 = new Galaxy("갤럭시S22");
		Phone p2 = new IPhone("아이폰13 mini");
		p1.powerOn();
		p2.powerOn();
		p1.powerOff();
		p2.powerOff();
		
		// 인터페이스 - 동일한 상호작용수단을 추가하기 위한 클래스
		//         - 필드는 최소한으로만 제공하고...
		//           메서드를 동일하게 쓸 수 있게 제공한다.
	}
}


















