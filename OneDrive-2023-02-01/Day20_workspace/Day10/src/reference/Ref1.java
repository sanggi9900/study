package reference;

public class Ref1 {
	public static void show(double[] arr) {
		// JAVA에는 "공유" 하도록 설정된게 굉장히 많음
		for (int i = 0; i < arr.length; i += 1) {
			System.out.print(arr[i] + " ");
		}
	}
	public static void show(int[] arr) {
		// 공유되는 것들의 코드는 완전히 동일하게 굴러간다.
		for (int i = 0; i < arr.length; i += 1) {
			System.out.print(arr[i] + " ");
		}
	}
	public static void main(String[] args) {
		// 비원시 자료형을 다룰 때 준비한다.
		// - 변수 또는 매개변수로 준비하여 사용
		int[] arr = { 1, 2, 3, 4, 5 };
		double[] arr1 = {1.1,2.2,3.3};
		show(arr);
		show(arr1);
	}
}
// 참조형 : 비원시 자료형을 통들어서 표현하는 것
// - 무조건 공유하여 사용하는 자료형
// 1) 공유하는 것이 복사하는 것보다 효율적인 경우가 존재함
// - 값이 2개 이상 보관된 것들
//   변수가 복사가 안되니 값을 복사하는데...
//   복사가 오래걸릴 수 있다.
//   -> A페트병에서 B페트명을 물을 옮겨담을 때
//   -> A페트병을 필요로 하는 사람한테 넘겨주면 되는거 아닌가?
//   -> 페트병을 받은 사람은 알아서 자기할일 하고 다시 돌려줄거다.

// 2) JAVA의 코드 실행구조에서 효율성을 위해서 쓴다.
// - C/C++ : 소스파일 -> 번역 -> 독립된 실행파일을 만든다.
// - JAVA : 소스파일 -> 번역 -> 번역본(*.class) -> 실행(Virtual Machine)
// - 파이썬 : 소스파일 -> 실시간번역 -> 결과
// - 다른 번역본에서 만들어진 것을 그대로 공유받아서, 또 다른 번역본으로 넘기면 되겠다!
// -> 생성된 것을 다른 곳에서도 쓸 수 있도록 해주겠다.
// -> 관리목록으로 등록한 "생성"한 것들을 알아서 정리도 해준다.

// 3) JAVA에서의 참조사용시점 : 어디서든 무언가를 "공유"받아야 할 때 사용한다.
// - 어디서? 메서드 외부가 출처라면 언제든지 준비한다.





